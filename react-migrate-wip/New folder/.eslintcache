[{"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\index.tsx":"1","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\components\\main.tsx":"2","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\components\\socketContext.tsx":"3","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\components\\home\\home.tsx":"4","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\components\\test\\test.tsx":"5","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\components\\home\\render.tsx":"6","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\utils\\utils.tsx":"7","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\components\\test\\render.tsx":"8","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\utils\\toast\\toast.tsx":"9"},{"size":231,"mtime":1609405606000,"results":"10","hashOfConfig":"11"},{"size":727,"mtime":1609478808000,"results":"12","hashOfConfig":"11"},{"size":1359,"mtime":1609482094000,"results":"13","hashOfConfig":"11"},{"size":1887,"mtime":1609480184000,"results":"14","hashOfConfig":"11"},{"size":2012,"mtime":1609485524000,"results":"15","hashOfConfig":"11"},{"size":4095,"mtime":1609434728000,"results":"16","hashOfConfig":"11"},{"size":767,"mtime":1609484842000,"results":"17","hashOfConfig":"11"},{"size":6856,"mtime":1609489414000,"results":"18","hashOfConfig":"11"},{"size":604,"mtime":1609481152000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"te7fi7",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\index.tsx",[],["43","44"],"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\components\\main.tsx",[],"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\components\\socketContext.tsx",["45"],"import React, { useEffect, useReducer, createContext } from 'react';\r\nimport { eventEmitter, setGlobalToggleFunc, SOCKET_EVENTS} from '../utils/utils';\r\nimport io from \"socket.io-client\";\r\nexport const SocketContext = createContext<any>({} as any);\r\nlet currentSocket : any;\r\nexport default function SocketContextData(props: any) {\r\n    const [toggle, setToggle] = useReducer(setGlobalToggleFunc, _());\r\n    const value = { get : toggle, set : setToggle };\r\n    useEffect(() => {\r\n        const socketEvent = (io as any)(\"http://localhost:3001\");\r\n        currentSocket = socketEvent;\r\n        SOCKET_EVENTS.forEach((event: string) => socketEvent.on(event, (params: any) => {\r\n            eventEmitter.next({ event: event, params: params })\r\n        })) //listener\r\n        const sendEvent = (key: string, data: any) => socketEvent.emit(key, {...data, id : toggle.id}) //sender\r\n        setToggle({ sendEvent: sendEvent });\r\n        console.log('events',socketEvent)\r\n    }, [])\r\n    return (\r\n        <SocketContext.Provider value={value}>\r\n            {props.children}\r\n        </SocketContext.Provider>\r\n    )\r\n}\r\n\r\nfunction _(){\r\n    return {\r\n        sendEvent: null, \r\n        id : Math.random()+\"-\"+new Date().valueOf(),\r\n        room : null,\r\n        isOwner : null,\r\n        name : '',\r\n        disconnect : () => currentSocket.disconnect()\r\n    }\r\n}","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\components\\home\\home.tsx",["46","47"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport HomeRender from './render';\r\nimport './home.scss'\r\nimport { SocketContext } from '../socketContext';\r\nimport { eventEmitter, FAILED_SOCKET_EVENTS, toastToggle } from '../../utils/utils';\r\nimport { useHistory } from 'react-router-dom';\r\nfunction Home() {\r\n    const history = useHistory();\r\n    const socketContext = (useContext(SocketContext) as any);\r\n    useEffect(() => {\r\n        //CREATED_ROOM ENTERED_ROOM\r\n        console.log('homeevents')\r\n        const unsub = eventEmitter.subscribe(response => {\r\n            console.log('HOME EVENTS-',response)\r\n            if(response.event === 'CREATED_ROOM' || response.event === 'ENTERED_ROOM'){\r\n                socketContext.set({ room : response.params.room, isOwner : response.event === 'CREATED_ROOM'});\r\n                history.push('/test')\r\n            }\r\n            else if(FAILED_SOCKET_EVENTS.includes(response.event)){\r\n                toastToggle.next(response.params.error)\r\n            }\r\n        })\r\n        return () => unsub?.unsubscribe();\r\n    },[])\r\n    const onCreate = (data : any) : void => {\r\n        console.log(data)\r\n        socketContext.set({  name :  data.name });\r\n        socketContext.get.sendEvent('CREATE_ROOM', { roomName : data.roomName, user : data.name })\r\n    }\r\n    const onEnter = (data : any) : void => {\r\n        socketContext.set({  name :  data.name });\r\n        socketContext.get.sendEvent('ENTER_ROOM', { roomName : data.roomName, user : data.name })\r\n    }\r\n    return (\r\n        <>\r\n        <button onClick={() => {socketContext.get.sendEvent('RESET')}}>RESET</button>\r\n        <HomeRender onCreate={onCreate} onEnter={onEnter}/>\r\n        </>\r\n    );\r\n}\r\nexport default Home;","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\components\\test\\test.tsx",["48"],"import React, { useContext, useEffect, useReducer } from 'react';\r\nimport TestRender from './render';\r\nimport { SocketContext } from '../socketContext';\r\nimport { eventEmitter, FAILED_SOCKET_EVENTS, setGlobalToggleFunc, toastToggle } from '../../utils/utils';\r\nimport { useHistory } from 'react-router-dom';\r\nfunction Test() {\r\n    const history = useHistory();\r\n    const socketContext = (useContext(SocketContext) as any);\r\n    const [testData, setTestData] = useReducer(setGlobalToggleFunc, { viewReady : false })\r\n    useEffect(()=>{\r\n        let unsub : any;\r\n        if(socketContext.get.room){\r\n            console.log(socketContext.get)\r\n            setTestData({ viewReady : true });\r\n            unsub = eventEmitter.subscribe(response => {\r\n                if(response.event === 'ROOM_RESPONSE' || response.event === 'ENTERED_ROOM' || response.event === 'READY_TOGGLED'){\r\n                    console.log(response.params.room.owner , socketContext.get.name)\r\n                    socketContext.set({ room : response.params.room, isOwner : response.params.room.owner === socketContext.get.name});\r\n                    if(response.params.message){\r\n                        toastToggle.next(response.params.message)\r\n                    }\r\n                }\r\n                else if(FAILED_SOCKET_EVENTS.find(e => e === response.event)){\r\n                    toastToggle.next(response.params.error)\r\n                }\r\n            })\r\n        }else{\r\n            history.push('/')\r\n        }\r\n        return () => unsub?.unsubscribe();\r\n    },[]);\r\n    const onExit = () : void => {\r\n        history.push('/')\r\n        socketContext.set({room : null})        \r\n        socketContext.get.sendEvent('LEAVE_ROOM')\r\n    }\r\n    const onReadyToggle = () : void => {\r\n        socketContext.get.sendEvent('READY_TOGGLE')\r\n    }\r\n    return (\r\n        testData.viewReady ? \r\n        <TestRender {...socketContext.get} onExit={onExit} onReadyToggle={onReadyToggle}/>\r\n        : null\r\n    );\r\n}\r\nexport default Test;","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\components\\home\\render.tsx",[],"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\utils\\utils.tsx",[],"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\components\\test\\render.tsx",["49","50","51","52","53"],"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer\\src\\utils\\toast\\toast.tsx",["54","55"],"import { timeStamp } from 'console';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { toastToggle } from '../utils';\r\nimport './toast.scss'\r\nfunction Toast() {\r\n    const [r, sR] = useState<string | boolean>(false)\r\n    let timeId : any = -1;\r\n    useEffect(() => {\r\n        toastToggle.subscribe(message => {\r\n            sR(message);\r\n            clearTimeout(timeId)\r\n            timeId = setTimeout(() => sR(false), 2000);\r\n        })\r\n    },[])\r\n    return (\r\n        r ?\r\n        <div className=\"toast-message\">\r\n            {r}\r\n        </div> :null\r\n    );\r\n}\r\nexport default Toast;",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":18,"column":8,"nodeType":"62","endLine":18,"endColumn":10,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":40,"nodeType":"66","messageId":"67","endLine":1,"endColumn":48},{"ruleId":"60","severity":1,"message":"68","line":24,"column":7,"nodeType":"62","endLine":24,"endColumn":9,"suggestions":"69"},{"ruleId":"60","severity":1,"message":"68","line":31,"column":7,"nodeType":"62","endLine":31,"endColumn":9,"suggestions":"70"},{"ruleId":"64","severity":1,"message":"71","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":26},{"ruleId":"64","severity":1,"message":"72","line":4,"column":7,"nodeType":"66","messageId":"67","endLine":4,"endColumn":11},{"ruleId":"64","severity":1,"message":"73","line":6,"column":22,"nodeType":"66","messageId":"67","endLine":6,"endColumn":24},{"ruleId":"64","severity":1,"message":"74","line":7,"column":22,"nodeType":"66","messageId":"67","endLine":7,"endColumn":33},{"ruleId":"64","severity":1,"message":"75","line":10,"column":20,"nodeType":"66","messageId":"67","endLine":10,"endColumn":29},{"ruleId":"64","severity":1,"message":"76","line":1,"column":10,"nodeType":"66","messageId":"67","endLine":1,"endColumn":19},{"ruleId":"60","severity":1,"message":"77","line":12,"column":22,"nodeType":"78","endLine":12,"endColumn":55},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'toggle.id'. Either include it or remove the dependency array.","ArrayExpression",["81"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'history' and 'socketContext'. Either include them or remove the dependency array.",["82"],["83"],"'useEffect' is defined but never used.","'para' is assigned a value but never used.","'id' is assigned a value but never used.","'setRoomData' is assigned a value but never used.","'setTarget' is assigned a value but never used.","'timeStamp' is defined but never used.","Assignments to the 'timeId' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"86","fix":"88"},"Update the dependencies array to be: [toggle.id]",{"range":"89","text":"90"},"Update the dependencies array to be: [history, socketContext]",{"range":"91","text":"92"},{"range":"93","text":"92"},[975,977],"[toggle.id]",[1089,1091],"[history, socketContext]",[1550,1552]]