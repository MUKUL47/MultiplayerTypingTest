[{"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\index.tsx":"1","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\components\\main.tsx":"2","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\components\\socketContext.tsx":"3","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\components\\home\\home.tsx":"4","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\components\\test\\test.tsx":"5","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\utils\\toast\\toast.tsx":"6","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\utils\\utils.tsx":"7","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\components\\home\\render.tsx":"8","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\components\\test\\render.tsx":"9"},{"size":231,"mtime":1609405606000,"results":"10","hashOfConfig":"11"},{"size":727,"mtime":1609478808000,"results":"12","hashOfConfig":"11"},{"size":1201,"mtime":1609566402000,"results":"13","hashOfConfig":"11"},{"size":2325,"mtime":1609565704000,"results":"14","hashOfConfig":"11"},{"size":2397,"mtime":1609571320000,"results":"15","hashOfConfig":"11"},{"size":604,"mtime":1609481152000,"results":"16","hashOfConfig":"11"},{"size":789,"mtime":1609570284000,"results":"17","hashOfConfig":"11"},{"size":4095,"mtime":1609564444000,"results":"18","hashOfConfig":"11"},{"size":7018,"mtime":1609576408000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"uxt56e",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\index.tsx",[],["43","44"],"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\components\\main.tsx",[],"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\components\\socketContext.tsx",[],"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\components\\home\\home.tsx",["45","46"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport HomeRender from './render';\r\nimport './home.scss'\r\nimport { SocketContext } from '../socketContext';\r\nimport { eventEmitter, FAILED_SOCKET_EVENTS, toastToggle } from '../../utils/utils';\r\nimport { useHistory } from 'react-router-dom';\r\nfunction Home() {\r\n    const history = useHistory();\r\n    const socketContext = (useContext(SocketContext) as any);\r\n    useEffect(() => {\r\n        if(socketContext.sendEvent){\r\n            const unsub = eventEmitter.subscribe(response => {\r\n                if(['ENTERED_ROOM', 'CREATED_ROOM'].includes(response.event)){\r\n                    socketContext.set({ room : response.params.room, isOwner : response.event === 'CREATED_ROOM'});\r\n                    initializeUser(response)\r\n                    history.push('/test')\r\n                    if(response.event === 'CREATED_ROOM') toastToggle.next(response.params.message)\r\n                }\r\n                else if(FAILED_SOCKET_EVENTS.includes(response.event)){\r\n                    toastToggle.next(response.params.error)\r\n                }\r\n            })\r\n            return () => unsub?.unsubscribe();\r\n        }\r\n    },[socketContext])\r\n    const initializeUser = (response : any) : void => {\r\n        let userResp : any;\r\n        if(response.event === 'CREATED_ROOM'){\r\n            userResp = { name : socketContext.name, isReady : false, progress : 0, position : 0 }\r\n        }else{\r\n            userResp = response.params.room.participants.find((p : any) => p.name === socketContext.name);\r\n        }\r\n        socketContext.set({ room : response.params.room, isOwner : response.event === 'CREATED_ROOM', userData : userResp});\r\n    }\r\n    const onCreate = (data : any) : void => {\r\n        socketContext.set({  name :  data.name });\r\n        socketContext.sendEvent('CREATE_ROOM', { roomName : data.roomName, user : data.name })\r\n    }\r\n    const onEnter = (data : any) : void => {\r\n        socketContext.set({  name :  data.name });\r\n        socketContext.sendEvent('ENTER_ROOM', { roomName : data.roomName, user : data.name })\r\n    }\r\n    return (\r\n        <>\r\n        <button onClick={() => {socketContext.sendEvent('RESET')}}>RESET</button>\r\n        <HomeRender onCreate={onCreate} onEnter={onEnter}/>\r\n        </>\r\n    );\r\n}\r\nexport default Home;","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\components\\test\\test.tsx",["47"],"import React, { useContext, useEffect, useReducer } from 'react';\r\nimport TestRender from './render';\r\nimport { SocketContext } from '../socketContext';\r\nimport { eventEmitter, FAILED_SOCKET_EVENTS, setGlobalToggleFunc, toastToggle } from '../../utils/utils';\r\nimport { useHistory } from 'react-router-dom';\r\nfunction Test() {\r\n    const history = useHistory();\r\n    const socketContext = (useContext(SocketContext) as any);\r\n    const [testData, setTestData] = useReducer(setGlobalToggleFunc, { viewReady : false })\r\n    useEffect(() => {\r\n        let unsub : any;\r\n        if(socketContext.room){\r\n            setTestData({ viewReady : true });\r\n            unsub = eventEmitter.subscribe(response => {\r\n                if(['READY_TOGGLED', 'ROOM_RESPONSE', 'ENTERED_ROOM'].includes(response.event)){\r\n                    socketContext.set({ \r\n                        room : response.params.room, \r\n                        isOwner : response.params.room.owner === socketContext.name,\r\n                        userData : response.params.room.participants.find((p : any) => p.name === socketContext.name)\r\n                    });\r\n                    if(response.params.message) toastToggle.next(response.params.message)\r\n                }\r\n                else if('ROOM_LOCK_TOGGLED' === response.event){\r\n                    socketContext.set({ room : {...socketContext.room, locked : response.params.room.locked} });\r\n                }\r\n                else if(FAILED_SOCKET_EVENTS.includes(response.event)){\r\n                    toastToggle.next(response.params.error)\r\n                }\r\n            })\r\n        }else{\r\n            history.push('/')\r\n        }\r\n        return () => unsub?.unsubscribe();\r\n    },[]);\r\n    const onExit = () : void => {\r\n        history.push('/')\r\n        socketContext.set({room : null})        \r\n        socketContext.sendEvent('LEAVE_ROOM')\r\n    }\r\n    const onRoomLockToggle = () : void => {\r\n        socketContext.sendEvent('ROOM_LOCK_TOGGLE')\r\n    }\r\n    const onReadyToggle = () : void => {\r\n        socketContext.sendEvent('READY_TOGGLE')\r\n    }\r\n    return (\r\n        testData.viewReady ? \r\n            <TestRender \r\n                {...socketContext} \r\n                onExit={onExit} \r\n                onReadyToggle={onReadyToggle}\r\n                onRoomLockToggle={onRoomLockToggle}\r\n            />\r\n        : null\r\n    );\r\n}\r\nexport default Test;","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\utils\\toast\\toast.tsx",["48","49"],"import { timeStamp } from 'console';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { toastToggle } from '../utils';\r\nimport './toast.scss'\r\nfunction Toast() {\r\n    const [r, sR] = useState<string | boolean>(false)\r\n    let timeId : any = -1;\r\n    useEffect(() => {\r\n        toastToggle.subscribe(message => {\r\n            sR(message);\r\n            clearTimeout(timeId)\r\n            timeId = setTimeout(() => sR(false), 2000);\r\n        })\r\n    },[])\r\n    return (\r\n        r ?\r\n        <div className=\"toast-message\">\r\n            {r}\r\n        </div> :null\r\n    );\r\n}\r\nexport default Toast;","D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\utils\\utils.tsx",[],"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\components\\home\\render.tsx",[],"D:\\mukul\\MultiplayerTypingTest\\react-migrate-wip\\typeracer-client\\src\\components\\test\\render.tsx",["50","51","52","53","54"],"import React, { useEffect, useReducer, useState } from 'react';\r\nimport { setGlobalToggleFunc } from '../../utils/utils';\r\nimport './test.scss'\r\nconst para = 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Perferendis quae doloremque porro in ab neque architecto tenetur repudiandae quidem assumenda minima commodi eius praesentium, laborum, quisquam sed nisi mollitia. Velit'.split(' ');\r\nfunction TestRender(props : any) {\r\n    const { isOwner, room, name, onExit, onReadyToggle, userData, onRoomLockToggle } = props;\r\n    const [roomData, setRoomData] = useReducer(setGlobalToggleFunc, { roomLocked : true })\r\n    //\r\n    const [paragraph, setParagraph] = useState<number>(0)\r\n    const [target, setTarget] = useState<string>('Lorem')\r\n    const [value, setValue] = useState<string>('')\r\n    // useEffect(()=>{\r\n    //         const t = [...para].splice(paragraph,1).join(' ');\r\n    //         setTarget(t);\r\n    //         (window as any).para.innerHTML = `\r\n    //         ${[...para].splice(0, paragraph).length > 0 ? `<h3>${[...para].splice(0, paragraph).join(' ')}</h3>` : ''}\r\n    //         ${[...para].splice(paragraph,1).length > 0 ?  `<h3 id='active'>${t}</h3>` : ''}\r\n    //         ${[...para].splice(paragraph+1).length > 0 ?  `<h3>${[...para].splice(paragraph+1).join(' ')}</h3>` : ''}\r\n    //         `;\r\n    //         (window as any)['progress-data'].style.width = ((paragraph/para.length) * 100).toFixed()+\"%\"\r\n    // },[paragraph])\r\n    const onParaChange = (e : any) : void => {\r\n        const v = e.target.value;\r\n        setValue(v)\r\n        if(v === target+' '){\r\n            setParagraph(paragraph+1)\r\n            setValue('');\r\n        }\r\n    }\r\n    const participants = room?.participants?.length || 1;\r\n    const { globalMessage, usersReady } = getGlobalMessage();\r\n    const { adminBtnMessage } = getAdminBtn();\r\n    return (\r\n        <div className=\"test\">\r\n            <div className=\"test-nav\">\r\n                <div className=\"exit\" onClick={onExit}>\r\n                    <i className=\"fas fa-door-open icon\"></i>\r\n                    <span><p>Leave</p></span>\r\n                </div>\r\n                <div className=\"room-name\">\r\n                    {room.roomName || '...'}\r\n                </div>\r\n                <div className=\"lock-togle\">\r\n                    {\r\n                        isOwner ? \r\n                        <div onClick={onRoomLockToggle} className=\"lock-toggle-btn\">\r\n                            <>\r\n                                {\r\n                                    room.locked ?\r\n                                    <>Unlock Room</>:\r\n                                    <>Lock Room</> \r\n                                }\r\n                            </>\r\n                        </div> : \r\n                        <p>Room is { room.locked ? 'locked' : 'open' }</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"socket-message\">\r\n                    {\r\n                        isOwner && usersReady? \r\n                        <div className=\"admin-options\">\r\n                            <button className=\"start-race\"> {adminBtnMessage} </button>\r\n                        </div>: null\r\n                    }\r\n                    <div className={isOwner ? 'global-messages' : 'global-messages g-m-t'}>\r\n                        {globalMessage}\r\n                    </div>\r\n                </div>\r\n            <div className=\"room-activity\">\r\n                <div className=\"progress\">\r\n                    <div className=\"participant-nav\">\r\n                        <div className=\"info\">\r\n                            <i className=\"fas fa-users icon\"></i>\r\n                            <span><p>Participants ({participants})</p></span>\r\n                        </div>\r\n                        <div className=\"action\">\r\n                            { participants > 1 ? <button onClick={onReadyToggle}>{userData.isReady ? 'Not Ready' : \"Ready\"}</button> : null }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"progress-users\">\r\n                        { \r\n                            room['participants'].map((participant : any, i :number) => {\r\n                                return <div className=\"p-user\" key={i}>\r\n                                        <div className=\"room-admin\">\r\n                                            { room.owner === participant.name ? <i className=\"fas fa-cog\"></i> : null }\r\n                                        </div>\r\n                                        <div className={ participant.name === name ? 'p-name p-name-me' : 'p-name' }>{participant.name === name ? 'You' : participant.name}</div>\r\n                                        \r\n                                        {\r\n                                            room.started?\r\n                                            <>\r\n                                                <div className=\"p-status\">\r\n                                                    <div className=\"progress-data\" style={{ width : `${participant.progress}%` }}></div>\r\n                                                </div>\r\n                                                <p className=\"p-data\">{participant.progress}%</p>\r\n                                            </> :\r\n                                            <div className=\"p-progress\"> {participant.isReady ? ' - Ready' : ' - Not Ready'} </div>\r\n                                        }\r\n                                    </div>\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"typing-playground\">\r\n                    <i className=\"fas fa-keyboard icon\"></i>\r\n                    <span><p>Paragraph</p></span>\r\n                    <div className=\"paragraph\" id='para'>\r\n                        {/* <h3 id='active'></h3>\r\n                        <h3> </h3> */}\r\n                    </div>\r\n                    <div className=\"typing-area\">\r\n                        <input type=\"text\" value={value} placeholder={target} onChange={onParaChange}/>\r\n                        <i className=\"fas fa-pen\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    function getGlobalMessage(){\r\n        const participants :any= room.participants.length;\r\n        const ready = room.participants.filter((p : any) => p.isReady).length;\r\n        const globalMessage = ready === participants ? \r\n        <p>All users are ready!</p> :\r\n        <>\r\n            <p>{`${ready} out of ${participants} users are ready `}</p> \r\n            <p className=\"g-msg-info\">(Race will start once all users are ready)</p>\r\n        </>\r\n        return { usersReady : ready === participants, globalMessage : globalMessage }\r\n    }\r\n\r\n    function getAdminBtn(){\r\n        const message = <div>Start the race!</div>;\r\n        return { adminBtnMessage : message }\r\n    }\r\n}\r\nexport default TestRender;",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":40,"nodeType":"61","messageId":"62","endLine":1,"endColumn":48},{"ruleId":"63","severity":1,"message":"64","line":25,"column":7,"nodeType":"65","endLine":25,"endColumn":22,"suggestions":"66"},{"ruleId":"63","severity":1,"message":"67","line":34,"column":7,"nodeType":"65","endLine":34,"endColumn":9,"suggestions":"68"},{"ruleId":"59","severity":1,"message":"69","line":1,"column":10,"nodeType":"61","messageId":"62","endLine":1,"endColumn":19},{"ruleId":"63","severity":1,"message":"70","line":12,"column":22,"nodeType":"71","endLine":12,"endColumn":55},{"ruleId":"59","severity":1,"message":"72","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":26},{"ruleId":"59","severity":1,"message":"73","line":4,"column":7,"nodeType":"61","messageId":"62","endLine":4,"endColumn":11},{"ruleId":"59","severity":1,"message":"74","line":7,"column":12,"nodeType":"61","messageId":"62","endLine":7,"endColumn":20},{"ruleId":"59","severity":1,"message":"75","line":7,"column":22,"nodeType":"61","messageId":"62","endLine":7,"endColumn":33},{"ruleId":"59","severity":1,"message":"76","line":10,"column":20,"nodeType":"61","messageId":"62","endLine":10,"endColumn":29},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'initializeUser'. Either include them or remove the dependency array.","ArrayExpression",["79"],"React Hook useEffect has missing dependencies: 'history' and 'socketContext'. Either include them or remove the dependency array.",["80"],"'timeStamp' is defined but never used.","Assignments to the 'timeId' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'useEffect' is defined but never used.","'para' is assigned a value but never used.","'roomData' is assigned a value but never used.","'setRoomData' is assigned a value but never used.","'setTarget' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [history, initializeUser, socketContext]",{"range":"85","text":"86"},"Update the dependencies array to be: [history, socketContext]",{"range":"87","text":"88"},[1190,1205],"[history, initializeUser, socketContext]",[1717,1719],"[history, socketContext]"]